# PIPELINE DEFINITION
# Name: training-pipeline
components:
  comp-get-data:
    executorLabel: exec-get-data
    outputDefinitions:
      artifacts:
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-training-model:
    executorLabel: exec-training-model
    inputDefinitions:
      artifacts:
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      parameters:
        training_status:
          parameterType: BOOLEAN
defaultPipelineRoot: gs://brave-watch-414204training_pipeline
deploymentSpec:
  executors:
    exec-get-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - get_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.5.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'numpy' 'pandas'\
          \ 'fsspec' 'db-dtypes' 'google-cloud-bigquery' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef get_data(\n    # project_id: Input[str],\n    dataset: Output[Dataset],\n\
          ):\n    from google.cloud import bigquery\n\n    # print(\"Project ID >>>>>>\"\
          \ + project_id)\n\n    # Initialize BigQuery client\n    client = bigquery.Client(project='brave-watch-414204')\n\
          \n    sql_query = \"\"\"\n    SELECT user_id, recipe_id, rating \n    FROM\
          \ `brave-watch-414204.RecipeQuery.interactions`\n    \"\"\"\n\n    # Execute\
          \ the query job\n    query_job = client.query(sql_query)\n\n    # Convert\
          \ the query resutlt to dataframe\n    data = query_job.to_dataframe()\n\n\
          \    # filter out target person\n    filtered_df = data.groupby('user_id').filter(lambda\
          \ x: len(x) > 20 and len(x) < 150)\n\n    # write the model out to the trained_model\n\
          \    # with open(trained_model, \"wb\") as f:\n    #     pickle.dump(model_svm,\
          \ f)\n\n    data.to_csv(dataset.path, header=True, index = False)\n    #\
          \ filtered_df.to_csv(dataset.path, header=True, index = False)\n    # print(\"\
          Dataset path >>>>>>\" + dataset.path)\n\n"
        image: python:3.9
    exec-training-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - training_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.5.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'numpy' 'pandas'\
          \ 'scikit-surprise' 'fsspec' 'gcsfs' 'google-cloud-storage' && \"$0\" \"\
          $@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\nfrom builtins import bool\n\ndef training_model(\n    dataset: Input[Dataset],\n\
          \    training_status: Output[bool]\n):\n    import pickle\n    import pandas\
          \ as pd\n    from google.cloud import storage\n\n    import surprise\n \
          \   from surprise import SVD\n    # from surprise import KNNBasic\n    #\
          \ from surprise import KNNWithMeans\n    from surprise import Dataset\n\
          \    from surprise import accuracy\n    from surprise import Reader\n  \
          \  from surprise.model_selection import train_test_split\n    from surprise.model_selection\
          \ import cross_validate\n\n\n    print(\"Dataset path >>>>>>\" + dataset.path)\n\
          \    ratings_df = pd.read_csv(dataset.path)\n\n    reader = Reader(rating_scale=(0,6))\n\
          \    data = Dataset.load_from_df(ratings_df, reader)  # assumes dataframe\
          \ contains: user, item, ratings (in this order)\n\n    # training\n    #\
          \ trainset, testset  = train_test_split(data, test_size=0.1)  # select 10%\
          \ of rating events\n    trainset = data.build_full_trainset()\n    algo\
          \ = SVD(n_factors = 50)\n    # algo = KNNBasic(k=40,sim_options={'name':\
          \ 'msd', 'user_based': True }) # User-based CF\n    # algo = KNNBasic(k=40,\
          \ sim_options={'name': 'cosine', 'user_based': True}) # ZeroDivisionError:\
          \ float division WHY !!! \n    # algo = KNNBasic(k=40, sim_options={'name':\
          \ 'pearson', 'user_based': True})\n    # algo = KNNBasic(k=40, sim_options={'name':\
          \ 'pearson_baseline', 'user_based': True})\n    algo.fit(trainset)\n\n \
          \   # Dump model pickle file\n    model_bytes = pickle.dumps(algo)\n\n \
          \   # Upload the model pickle file to GCS\n    bucket_name = \"brave-watch-414204\"\
          \n    pickle_file_name = \"svd_model.pkl\"\n    folder_path = \"Model\"\n\
          \    destination_blob_name = f'{folder_path}/{pickle_file_name}'\n\n   \
          \ storage_client = storage.Client()\n    bucket = storage_client.bucket(bucket_name)\n\
          \    blob = bucket.blob(destination_blob_name)\n    blob.upload_from_string(model_bytes)\n\
          \    training_status = True\n\n"
        image: python:3.9
pipelineInfo:
  name: training-pipeline
root:
  dag:
    tasks:
      get-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-get-data
        taskInfo:
          name: get-data
      training-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-training-model
        dependentTasks:
        - get-data
        inputs:
          artifacts:
            dataset:
              taskOutputArtifact:
                outputArtifactKey: dataset
                producerTask: get-data
        taskInfo:
          name: training-model
schemaVersion: 2.1.0
sdkVersion: kfp-2.5.0
